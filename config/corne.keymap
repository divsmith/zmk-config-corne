/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <behaviors.dtsi>

// Layer Definitions
#define SYMBOLS 1
#define NUMBERS 2
#define NAV 3

// Keycode Definitions
#define HYP LS(LC(LA(LGUI)))
#define HYPER(key) LS(LC(LA(LG(key))))
#define MEH(key) LS(LC(LA(key)))

/ {
        behaviors {
                bhm: balanced_homerow_mods {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                };

                ht_tp: tap_preferred_thumbkeys {
                        compatible = "zmk,behavior-hold-tap";
                        label = "TAP_PREFERRED_THUMBKEYS";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&kp>;
                };
        };
        
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &trans &kp Q        &kp W &lt NAV E        &kp R       &kp T        &kp Y &kp U       &kp I       &kp O   &kp P           &trans
   &trans &bhm LCTRL A &kp S &bhm LSHFT D &bhm LGUI F &kp G        &kp H &bhm RGUI J &bhm RSFT K &kp L   &bhm RCTRL APOS &trans
   &trans &bhm LALT Z  &kp X &kp C        &kp V       &kp B        &kp N &kp M       &kp COMMA   &kp DOT &bhm RALT FSLH  &trans
                      &kp TAB &lt SYMBOLS ESC &kp BSPC              &ht_tp HYP SPACE &lt NUMBERS RET &kp BSPC
                        >;
                };

                symbol_layer {
                        bindings = <
&trans &trans &trans &trans &trans &trans       &trans    &trans    &kp LPAR &kp RPAR &kp GRAVE &trans
&trans &trans &trans &trans &trans &trans       &kp MINUS &kp EQUAL &kp LBRC &kp RBRC &kp SEMI  &trans
&trans &trans &trans &trans &trans &trans       &trans    &trans    &kp LT   &kp GT   &trans    &trans
                     &trans &trans &trans       &trans &trans &trans         
                        >;
                };

                number_layer {
                        bindings = <
&trans &trans &kp N7 &kp N8 &kp N9 &trans       &trans &trans &trans &trans &trans &trans
&trans &trans &kp N4 &kp N5 &kp N6 &trans       &trans &trans &trans &trans &trans &trans
&trans &trans &kp N1 &kp N2 &kp N3 &trans       &trans &trans &trans &trans &trans &trans
                     &trans &kp N0 &trans       &trans &trans &trans         
                        >;
                };
                
                nav_layer {
                        bindings = <
&trans &trans &trans &trans &trans &trans       &trans &trans &kp LS(LG(LBRC)) &kp LS(LG(RBRC)) &trans &trans
&trans &trans &trans &trans &trans &trans       &trans &kp HYPER(LEFT) &kp MEH(LEFT) &kp MEH(RIGHT) &kp HYPER(RIGHT) &trans
&trans &trans &trans &trans &trans &trans       &trans &kp LC(LEFT) &kp HYPER(F13) &kp HYPER(F14) &kp LC(RIGHT) &trans
                     &trans &trans &trans       &trans &kp MEH(RET) &trans         
                        >;
                };

                empty_layer {
                        bindings = <
&trans &trans &trans &trans &trans &trans       &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans       &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans       &trans &trans &trans &trans &trans &trans
                     &trans &trans &trans       &trans &trans &trans         
                        >;
                };


        };
};
